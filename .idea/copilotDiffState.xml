<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/components/CheckoutModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/CheckoutModal.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect, useMemo, useRef, useState } from 'react';&#10;import { loadStripe, type StripeEmbeddedCheckout } from '@stripe/stripe-js';&#10;&#10;type Props = {&#10;  open: boolean;&#10;  onClose: () =&gt; void;&#10;  planId: string;&#10;  cycle: 'monthly' | 'yearly';&#10;  email?: string;&#10;};&#10;&#10;export default function CheckoutModal({ open, onClose, planId, cycle, email }: Props) {&#10;  const publishableKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY;&#10;  const stripeP = useMemo(() =&gt; (publishableKey ? loadStripe(publishableKey) : null), [publishableKey]);&#10;  const containerRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;  const checkoutRef = useRef&lt;StripeEmbeddedCheckout | null&gt;(null);&#10;  const [loading, setLoading] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  // Lock body scroll when modal open&#10;  useEffect(() =&gt; {&#10;    if (!open) return;&#10;    const prev = document.body.style.overflow;&#10;    document.body.style.overflow = 'hidden';&#10;    return () =&gt; {&#10;      document.body.style.overflow = prev;&#10;    };&#10;  }, [open]);&#10;&#10;  // ESC to close&#10;  useEffect(() =&gt; {&#10;    if (!open) return;&#10;    const onKey = (e: KeyboardEvent) =&gt; {&#10;      if (e.key === 'Escape') onClose();&#10;    };&#10;    window.addEventListener('keydown', onKey);&#10;    return () =&gt; window.removeEventListener('keydown', onKey);&#10;  }, [open, onClose]);&#10;&#10;  // Initialize Embedded Checkout when open&#10;  useEffect(() =&gt; {&#10;    let active = true;&#10;    (async () =&gt; {&#10;      if (!open) return;&#10;      if (!stripeP) { setError('Stripe publishable key missing'); return; }&#10;      try {&#10;        setLoading(true);&#10;        setError(null);&#10;        // Destroy previous instance if any&#10;        if (checkoutRef.current) {&#10;          try { checkoutRef.current.destroy?.(); } catch { /* ignore */ }&#10;          checkoutRef.current = null;&#10;        }&#10;        const res = await fetch('/api/checkout/embedded', {&#10;          method: 'POST', headers: { 'Content-Type': 'application/json' },&#10;          body: JSON.stringify({ planId, billingCycle: cycle, email })&#10;        });&#10;        const data = await res.json();&#10;        if (!res.ok) throw new Error(data?.error || 'No se pudo iniciar el checkout');&#10;        const stripe = await stripeP;&#10;        if (!stripe) throw new Error('Stripe no disponible');&#10;        if (!containerRef.current) throw new Error('Contenedor no disponible');&#10;        if (!active) return;&#10;        const checkout = await stripe.initEmbeddedCheckout({ clientSecret: data.client_secret });&#10;        checkoutRef.current = checkout;&#10;        checkout.mount(containerRef.current);&#10;      } catch (e: unknown) {&#10;        const msg = e instanceof Error ? e.message : 'Error inesperado';&#10;        setError(msg);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    })();&#10;&#10;    return () =&gt; {&#10;      active = false;&#10;      if (checkoutRef.current) {&#10;        try { checkoutRef.current.destroy?.(); } catch { /* ignore */ }&#10;        checkoutRef.current = null;&#10;      }&#10;    };&#10;  }, [open, stripeP, planId, cycle, email]);&#10;&#10;  const startHostedFallback = async () =&gt; {&#10;    try {&#10;      const res = await fetch('/api/checkout', {&#10;        method: 'POST', headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify({ planId, billingCycle: cycle, email })&#10;      });&#10;      const data = await res.json();&#10;      if (!res.ok || !data?.url) throw new Error(data?.error || 'No se pudo iniciar el checkout');&#10;      window.location.href = data.url as string;&#10;    } catch (e) {&#10;      // Surface the error&#10;      setError(e instanceof Error ? e.message : 'Error inesperado');&#10;    }&#10;  };&#10;&#10;  if (!open) return null;&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 z-[100]&quot;&gt;&#10;      &lt;div className=&quot;absolute inset-0 bg-black/70 backdrop-blur-[2px]&quot; onClick={onClose} /&gt;&#10;      &lt;div className=&quot;absolute inset-0 flex items-start md:items-center justify-center p-4 md:p-6&quot;&gt;&#10;        &lt;div className=&quot;relative w-full max-w-6xl max-h-[90vh] overflow-y-auto rounded-xl border border-white/10 bg-white/[.02] shadow-2xl backdrop-blur-md pixel-border&quot;&gt;&#10;          &lt;button aria-label=&quot;Cerrar&quot; onClick={onClose} className=&quot;absolute top-2 right-2 text-white/60 hover:text-white px-2 py-1&quot;&gt;✕&lt;/button&gt;&#10;          &lt;div className=&quot;relative p-4 sm:p-6 min-h-[560px]&quot;&gt;&#10;            {error ? (&#10;              &lt;div className=&quot;text-red-300 space-y-3&quot;&gt;&#10;                &lt;div&gt;{error}&lt;/div&gt;&#10;                &lt;div&gt;&#10;                  &lt;button onClick={startHostedFallback} className=&quot;px-3 py-2 rounded-md border border-white/20 text-white/80 hover:bg-white/5&quot;&gt;Continuar en Checkout alojado&lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;div className=&quot;min-h-[520px] relative&quot; aria-busy={loading}&gt;&#10;                &lt;div ref={containerRef} className=&quot;h-full&quot; /&gt;&#10;                {loading &amp;&amp; (&#10;                  &lt;div className=&quot;absolute inset-0 grid place-items-center text-white/60&quot;&gt;&#10;                    &lt;div className=&quot;animate-pulse&quot;&gt;Cargando checkout…&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect, useMemo, useRef, useState } from 'react';&#10;import { loadStripe, type StripeEmbeddedCheckout } from '@stripe/stripe-js';&#10;&#10;type Props = {&#10;  open: boolean;&#10;  onCloseAction: () =&gt; void;&#10;  planId: string;&#10;  cycle: 'monthly' | 'yearly';&#10;  email?: string;&#10;};&#10;&#10;export default function CheckoutModal({ open, onCloseAction, planId, cycle, email }: Props) {&#10;  const publishableKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY;&#10;  const stripeP = useMemo(() =&gt; (publishableKey ? loadStripe(publishableKey) : null), [publishableKey]);&#10;  const containerRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;  const checkoutRef = useRef&lt;StripeEmbeddedCheckout | null&gt;(null);&#10;  const [loading, setLoading] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  // Lock body scroll when modal open&#10;  useEffect(() =&gt; {&#10;    if (!open) return;&#10;    const prev = document.body.style.overflow;&#10;    document.body.style.overflow = 'hidden';&#10;    return () =&gt; {&#10;      document.body.style.overflow = prev;&#10;    };&#10;  }, [open]);&#10;&#10;  // ESC to close&#10;  useEffect(() =&gt; {&#10;    if (!open) return;&#10;    const onKey = (e: KeyboardEvent) =&gt; {&#10;      if (e.key === 'Escape') onCloseAction();&#10;    };&#10;    window.addEventListener('keydown', onKey);&#10;    return () =&gt; window.removeEventListener('keydown', onKey);&#10;  }, [open, onCloseAction]);&#10;&#10;  // Initialize Embedded Checkout when open&#10;  useEffect(() =&gt; {&#10;    let active = true;&#10;    (async () =&gt; {&#10;      if (!open) return;&#10;      if (!stripeP) { setError('Stripe publishable key missing'); return; }&#10;      try {&#10;        setLoading(true);&#10;        setError(null);&#10;        // Destroy previous instance if any&#10;        if (checkoutRef.current) {&#10;          try { checkoutRef.current.destroy?.(); } catch { /* ignore */ }&#10;          checkoutRef.current = null;&#10;        }&#10;        const res = await fetch('/api/checkout/embedded', {&#10;          method: 'POST', headers: { 'Content-Type': 'application/json' },&#10;          body: JSON.stringify({ planId, billingCycle: cycle, email })&#10;        });&#10;        const data = await res.json();&#10;        if (!res.ok) { setError(data?.error || 'No se pudo iniciar el checkout'); return; }&#10;        const stripe = await stripeP;&#10;        if (!stripe) { setError('Stripe no disponible'); return; }&#10;        if (!containerRef.current) { setError('Contenedor no disponible'); return; }&#10;        if (!active) return;&#10;        const checkout = await stripe.initEmbeddedCheckout({ clientSecret: data.client_secret });&#10;        checkoutRef.current = checkout;&#10;        checkout.mount(containerRef.current);&#10;      } catch (e: unknown) {&#10;        const msg = e instanceof Error ? e.message : 'Error inesperado';&#10;        setError(msg);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    })();&#10;&#10;    return () =&gt; {&#10;      active = false;&#10;      if (checkoutRef.current) {&#10;        try { checkoutRef.current.destroy?.(); } catch { /* ignore */ }&#10;        checkoutRef.current = null;&#10;      }&#10;    };&#10;  }, [open, stripeP, planId, cycle, email]);&#10;&#10;  const startHostedFallback = async () =&gt; {&#10;    try {&#10;      const res = await fetch('/api/checkout', {&#10;        method: 'POST', headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify({ planId, billingCycle: cycle, email })&#10;      });&#10;      const data = await res.json();&#10;      if (!res.ok || !data?.url) { setError(data?.error || 'No se pudo iniciar el checkout'); return; }&#10;      window.location.href = data.url as string;&#10;    } catch (e) {&#10;      // Surface the error&#10;      setError(e instanceof Error ? e.message : 'Error inesperado');&#10;    }&#10;  };&#10;&#10;  if (!open) return null;&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 z-[100]&quot;&gt;&#10;      &lt;div className=&quot;absolute inset-0 bg-black/70 backdrop-blur-[2px]&quot; onClick={onCloseAction} /&gt;&#10;      &lt;div className=&quot;absolute inset-0 flex items-start md:items-center justify-center p-4 md:p-6&quot;&gt;&#10;        &lt;div className=&quot;relative w-full max-w-6xl max-h-[90vh] overflow-y-auto rounded-xl border border-white/10 bg-white/[.02] shadow-2xl backdrop-blur-md pixel-border&quot;&gt;&#10;          &lt;button aria-label=&quot;Cerrar&quot; onClick={onCloseAction} className=&quot;absolute top-2 right-2 text-white/60 hover:text-white px-2 py-1&quot;&gt;✕&lt;/button&gt;&#10;          &lt;div className=&quot;relative p-4 sm:p-6 min-h-[560px]&quot;&gt;&#10;            {error ? (&#10;              &lt;div className=&quot;text-red-300 space-y-3&quot;&gt;&#10;                &lt;div&gt;{error}&lt;/div&gt;&#10;                &lt;div&gt;&#10;                  &lt;button onClick={startHostedFallback} className=&quot;px-3 py-2 rounded-md border border-white/20 text-white/80 hover:bg-white/5&quot;&gt;Continuar en Checkout alojado&lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;div className=&quot;min-h-[520px] relative&quot; aria-busy={loading}&gt;&#10;                &lt;div ref={containerRef} className=&quot;h-full&quot; /&gt;&#10;                {loading &amp;&amp; (&#10;                  &lt;div className=&quot;absolute inset-0 grid place-items-center text-white/60&quot;&gt;&#10;                    &lt;div className=&quot;animate-pulse&quot;&gt;Cargando checkout…&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/ElementsCheckoutModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/ElementsCheckoutModal.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { Suspense, useCallback, useEffect, useMemo, useState, type CSSProperties } from 'react';&#10;import { Elements, PaymentElement, useElements, useStripe, LinkAuthenticationElement, AddressElement } from '@stripe/react-stripe-js';&#10;import type { StripeAddressElementChangeEvent, StripeLinkAuthenticationElementChangeEvent } from '@stripe/stripe-js';&#10;import { loadStripe } from '@stripe/stripe-js';&#10;import { useUser } from '@clerk/nextjs';&#10;&#10;type Props = {&#10;  open: boolean;&#10;  onClose: () =&gt; void;&#10;  planId: string;&#10;  cycle: 'monthly' | 'yearly';&#10;  email?: string;&#10;};&#10;&#10;function CheckoutForm({ intentType }: { intentType: 'payment' | 'setup' }) {&#10;  const stripe = useStripe();&#10;  const elements = useElements();&#10;  const [submitting, setSubmitting] = useState(false);&#10;  const [errMsg, setErrMsg] = useState&lt;string | null&gt;(null);&#10;  const [layoutType, setLayoutType] = useState&lt;'tabs' | 'accordion'&gt;(&#10;    () =&gt; (typeof window !== 'undefined' &amp;&amp; window.innerWidth &lt;= 640 ? 'accordion' : 'tabs')&#10;  );&#10;&#10;  useEffect(() =&gt; {&#10;    const onResize = () =&gt; {&#10;      const next = window.innerWidth &lt;= 640 ? 'accordion' : 'tabs';&#10;      setLayoutType(prev =&gt; (prev === next ? prev : next));&#10;    };&#10;    window.addEventListener('resize', onResize);&#10;    return () =&gt; window.removeEventListener('resize', onResize);&#10;  }, []);&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!stripe || !elements) return;&#10;    setSubmitting(true);&#10;    let error;&#10;    setErrMsg(null);&#10;    if (intentType === 'setup') {&#10;      ({ error } = await stripe.confirmSetup({&#10;        elements,&#10;        confirmParams: { return_url: `${window.location.origin}/subscribe/success?checkout=success` },&#10;      }));&#10;    } else {&#10;      ({ error } = await stripe.confirmPayment({&#10;        elements,&#10;        confirmParams: { return_url: `${window.location.origin}/subscribe/success?checkout=success` },&#10;      }));&#10;    }&#10;    if (error) setErrMsg(error.message || 'No se pudo confirmar el pago');&#10;    setSubmitting(false);&#10;  };&#10;&#10;  return (&#10;    &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;&#10;      {errMsg &amp;&amp; (&#10;        &lt;div className=&quot;text-sm text-red-300 bg-red-500/10 border border-red-500/20 rounded p-2&quot;&gt;{errMsg}&lt;/div&gt;&#10;      )}&#10;      &lt;div className=&quot;pixel-border rounded-lg p-3&quot;&gt;&#10;        &lt;PaymentElement&#10;          key={layoutType}&#10;          options={{&#10;            layout: { type: layoutType, defaultCollapsed: layoutType === 'accordion' },&#10;            fields: { billingDetails: { name: 'auto', email: 'never', address: 'auto' } },&#10;          }}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;      &lt;button type=&quot;submit&quot; disabled={submitting || !stripe || !elements} className=&quot;btn w-full px-4 py-3 rounded-md bg-yellow-400 text-black pixel-font text-[12px] tracking-wider hover:bg-yellow-300 disabled:opacity-60&quot;&gt;&#10;        {submitting ? 'Procesando…' : 'Pagar y suscribirse'}&#10;      &lt;/button&gt;&#10;    &lt;/form&gt;&#10;  );&#10;}&#10;&#10;function Inner({ planId, cycle, initialEmail, onClose }: { planId: string; cycle: 'monthly'|'yearly'; initialEmail?: string; onClose: () =&gt; void }) {&#10;  const publishableKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY;&#10;  const stripePromise = useMemo(() =&gt; (publishableKey ? loadStripe(publishableKey) : null), [publishableKey]);&#10;  const { user, isSignedIn } = useUser();&#10;  const [clientSecret, setClientSecret] = useState&lt;string | null&gt;(null);&#10;  const [intentType, setIntentType] = useState&lt;'payment' | 'setup' | null&gt;(null);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [loading, setLoading] = useState(false);&#10;  const [promotionCode, setPromotionCode] = useState('');&#10;  const [applying, setApplying] = useState(false);&#10;  const [promoError, setPromoError] = useState&lt;string | null&gt;(null);&#10;  const [lastInvalidPromo, setLastInvalidPromo] = useState&lt;string | null&gt;(null);&#10;  const [price, setPrice] = useState&lt;{ unit_amount: number | null; currency: string; interval: 'day'|'week'|'month'|'year' } | null&gt;(null);&#10;  const [customerId, setCustomerId] = useState&lt;string | null&gt;(null);&#10;  const [priceId, setPriceId] = useState&lt;string | null&gt;(null);&#10;  const [email, setEmail] = useState&lt;string | undefined&gt;(initialEmail);&#10;  const [emailComplete, setEmailComplete] = useState&lt;boolean&gt;(!!(initialEmail &amp;&amp; /.+@.+\..+/.test(initialEmail)));&#10;  const [totals, setTotals] = useState&lt;{ subtotal?: number; tax?: number; total?: number; discount?: number; currency?: string; lineDescription?: string } | null&gt;(null);&#10;  const [planIdLabel, setPlanIdLabel] = useState('');&#10;  const [billingCycleLabel, setBillingCycleLabel] = useState('');&#10;  const [billingAddress, setBillingAddress] = useState&lt;{ line1?: string; line2?: string; city?: string; state?: string; postal_code?: string; country?: string } | undefined&gt;(undefined);&#10;  const [emailTouched, setEmailTouched] = useState(false);&#10;&#10;  function formatMoney(amountMinor: number | null | undefined, currency: string) {&#10;    if (amountMinor == null) return '—';&#10;    try {&#10;      const amt = amountMinor / 100;&#10;      return new Intl.NumberFormat('es-MX', { style: 'currency', currency: (currency || 'USD').toUpperCase() }).format(amt);&#10;    } catch {&#10;      return `${(amountMinor / 100).toFixed(2)} ${currency?.toUpperCase() || ''}`;&#10;    }&#10;  }&#10;&#10;  const toTitle = (s: string) =&gt; (s ? s.charAt(0).toUpperCase() + s.slice(1).toLowerCase() : s);&#10;  const normalizePromo = (s?: string | null) =&gt; (s ? s.trim().toUpperCase() : '');&#10;&#10;  const isValidEmail = (s?: string) =&gt; !!(s &amp;&amp; /.+@.+\..+/.test(s));&#10;  const createSession = useCallback(async (opts?: { promo?: string }) =&gt; {&#10;    if (!stripePromise) { setError('Stripe publishable key missing'); return; }&#10;    setPlanIdLabel(toTitle(planId));&#10;    setBillingCycleLabel(cycle === 'yearly' ? 'Anual' : 'Mensual');&#10;    if (!isSignedIn &amp;&amp; !isValidEmail(email)) {&#10;      return; // evita llamadas hasta tener email válido&#10;    }&#10;    try {&#10;      const res = await fetch('/api/subscribe/elements', {&#10;        method: 'POST', headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify({&#10;          planId,&#10;          billingCycle: cycle,&#10;          email: !isSignedIn ? (email || undefined) : undefined,&#10;          promotionCode: opts?.promo || undefined,&#10;          customerDetails: billingAddress ? { address: billingAddress, email } : (email ? { email } : undefined),&#10;        })&#10;      });&#10;      const data = await res.json();&#10;      if (!res.ok) throw new Error(data?.error || 'No se pudo iniciar el pago');&#10;      setClientSecret(data.client_secret as string);&#10;      setIntentType(data.intent_type === 'setup' ? 'setup' : 'payment');&#10;      setPrice(data.price || null);&#10;      setCustomerId(data.customer_id || null);&#10;      setPriceId(data.price_id || null);&#10;      if (typeof data.promotion_invalid !== 'undefined' &amp;&amp; data.promotion_invalid) {&#10;        setPromoError('Código de promoción no válido.');&#10;        setLastInvalidPromo(normalizePromo(opts?.promo || promotionCode));&#10;        try {&#10;          if (customerId &amp;&amp; priceId) {&#10;            const res2 = await fetch('/api/subscribe/preview', {&#10;              method: 'POST', headers: { 'Content-Type': 'application/json' },&#10;              body: JSON.stringify({ customerId, priceId, customerDetails: billingAddress ? { email, address: billingAddress } : (email ? { email } : undefined) })&#10;            });&#10;            const data2 = await res2.json();&#10;            if (res2.ok) setTotals(data2);&#10;          } else {&#10;            setTotals((prev) =&gt; prev ? { ...prev, discount: 0 } : prev);&#10;          }&#10;        } catch {}&#10;      } else {&#10;        setPromoError(null);&#10;        setLastInvalidPromo(null);&#10;      }&#10;    } catch (e: unknown) {&#10;      setError(e instanceof Error ? e.message : 'Error inesperado');&#10;    }&#10;  }, [stripePromise, planId, cycle, isSignedIn, email, promotionCode, customerId, priceId, billingAddress]);&#10;&#10;  // Debounced single source of truth to create a session&#10;  useEffect(() =&gt; {&#10;    if (!stripePromise) return;&#10;    if (clientSecret) return;&#10;    if (!(isSignedIn || (email &amp;&amp; emailComplete))) return;&#10;    const t = setTimeout(async () =&gt; {&#10;      setLoading(true);&#10;      try { await createSession(); } finally { setLoading(false); }&#10;    }, 350);&#10;    return () =&gt; clearTimeout(t);&#10;  }, [stripePromise, isSignedIn, email, emailComplete, clientSecret, createSession]);&#10;&#10;  useEffect(() =&gt; {&#10;    const t = setTimeout(async () =&gt; {&#10;      if (!customerId || !priceId) return;&#10;      if (promoError &amp;&amp; normalizePromo(promotionCode) === normalizePromo(lastInvalidPromo)) return;&#10;      try {&#10;        const res = await fetch('/api/subscribe/preview', {&#10;          method: 'POST', headers: { 'Content-Type': 'application/json' },&#10;          body: JSON.stringify({ customerId, priceId, promotionCode: promotionCode || undefined, customerDetails: billingAddress ? { email, address: billingAddress } : (email ? { email } : undefined) })&#10;        });&#10;        const data = await res.json();&#10;        if (res.ok) setTotals(data);&#10;      } catch {}&#10;    }, 400);&#10;    return () =&gt; clearTimeout(t);&#10;  }, [customerId, priceId, promotionCode, email, promoError, lastInvalidPromo, billingAddress]);&#10;&#10;  const appearance = {&#10;    theme: 'night' as const,&#10;    variables: {&#10;      colorPrimary: '#FACC15',&#10;      colorBackground: '#0b1220',&#10;      colorText: '#e5e7eb',&#10;      colorTextSecondary: '#9ca3af',&#10;      colorIcon: '#9ca3af',&#10;      colorDanger: '#f87171',&#10;      fontFamily: 'ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu',&#10;      borderRadius: '10px',&#10;      spacingUnit: '6px',&#10;    },&#10;    rules: {&#10;      '.Label': { color: 'rgba(255,255,255,0.7)' },&#10;      '.Error': { color: '#fca5a5' },&#10;      '.Input': { backgroundColor: 'rgba(255,255,255,0.04)', border: '1px solid rgba(255,255,255,0.08)' },&#10;      '.Input:focus': { outline: 'none', boxShadow: '0 0 0 2px rgba(250,204,21,0.45)' },&#10;      '.Input--invalid': { borderColor: '#f87171' },&#10;      '.Tab, .Block': { backgroundColor: 'rgba(255,255,255,0.03)', boxShadow: 'none', border: '1px solid rgba(255,255,255,0.06)' },&#10;      '.Tab:hover': { backgroundColor: 'rgba(255,255,255,0.05)' },&#10;      '.Tab--selected': { borderColor: 'rgba(250,204,21,0.5)' },&#10;    }&#10;  } as const;&#10;&#10;  return (&#10;    &lt;div className=&quot;relative w-full max-w-6xl max-h-[90vh] overflow-y-auto rounded-xl border border-white/10 bg-white/[.02] shadow-2xl backdrop-blur-md pixel-border&quot;&gt;&#10;      {/* Pixel-art close button anchored to the card */}&#10;      &lt;button aria-label=&quot;Cerrar&quot; onClick={onClose} className=&quot;pixel-close-btn -top-5 -right-5 z-20&quot; title=&quot;Cerrar&quot;&gt;&#10;        &lt;span className=&quot;btn-face&quot; /&gt;&#10;      &lt;/button&gt;&#10;      {(() =&gt; { const glowStyle = { ['--glow' as unknown as string]: '#FACC15' } as CSSProperties; return (&lt;div className=&quot;edge-glow&quot; style={glowStyle} /&gt;); })()}&#10;      &lt;div className=&quot;absolute inset-0 rounded-xl pointer-events-none ring-1 ring-white/5&quot; /&gt;&#10;      &lt;div className=&quot;relative p-4 sm:p-6&quot;&gt;&#10;        {loading &amp;&amp; (&lt;div className=&quot;absolute top-3 right-3 text-[11px] text-white/60&quot;&gt;Preparando…&lt;/div&gt;)}&#10;        &lt;div className=&quot;mb-3 flex items-center justify-between text-white/80&quot;&gt;&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;svg width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden&gt;&#10;              &lt;path d=&quot;M6 10V8a6 6 0 1 1 12 0v2&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;1.5&quot; strokeLinecap=&quot;round&quot; /&gt;&#10;              &lt;rect x=&quot;4&quot; y=&quot;10&quot; width=&quot;16&quot; height=&quot;10&quot; rx=&quot;2&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;1.5&quot; /&gt;&#10;              &lt;circle cx=&quot;12&quot; cy=&quot;15&quot; r=&quot;1.5&quot; fill=&quot;currentColor&quot; /&gt;&#10;            &lt;/svg&gt;&#10;            &lt;span className=&quot;pixel-font text-[10px] tracking-wider&quot;&gt;Pago seguro con Stripe&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;span className=&quot;pixel-font text-[10px] text-white/50&quot;&gt;PixelGrimoire&lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {!publishableKey &amp;&amp; (&#10;          &lt;div className=&quot;text-red-300&quot;&gt;Falta configurar NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY&lt;/div&gt;&#10;        )}&#10;&#10;        {error &amp;&amp; (&#10;          &lt;div className=&quot;text-red-300 space-y-3&quot;&gt;&#10;            &lt;div&gt;{error}&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {!error &amp;&amp; (&#10;          &lt;div className=&quot;relative min-h-[560px]&quot;&gt;&#10;            {!clientSecret || !stripePromise || !intentType ? (&#10;              &lt;div className=&quot;absolute inset-0 grid place-items-center text-white/60&quot;&gt;&#10;                &lt;div className=&quot;animate-pulse&quot;&gt;Cargando…&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;Elements options={{ clientSecret, appearance, loader: 'always', locale: 'es' }} stripe={stripePromise}&gt;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-6 lg:grid-cols-9 gap-6&quot;&gt;&#10;                  {/* Columna izquierda: formulario */}&#10;                  &lt;div className=&quot;order-1 md:col-span-4 lg:col-span-5 space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;pixel-border rounded-lg p-3&quot;&gt;&#10;                      &lt;div className=&quot;mb-2 text-white/80 text-xs&quot;&gt;Correo electrónico&lt;/div&gt;&#10;                      {isSignedIn ? (&#10;                        &lt;div className=&quot;px-3 py-2 rounded bg-white/5 border border-white/10 text-white/80 text-sm select-none cursor-not-allowed&quot;&gt;&#10;                          {user?.primaryEmailAddress?.emailAddress || user?.emailAddresses?.[0]?.emailAddress || '—'}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;&gt;&#10;                          &lt;LinkAuthenticationElement&#10;                            options={ email &amp;&amp; emailComplete ? { defaultValues: { email } } : undefined }&#10;                            onChange={(e: StripeLinkAuthenticationElementChangeEvent)=&gt; { setEmailTouched(true); setEmail(e.value?.email || undefined); setEmailComplete(!!e.complete); }}&#10;                          /&gt;&#10;                          {!isSignedIn &amp;&amp; emailTouched &amp;&amp; !emailComplete &amp;&amp; (&#10;                            &lt;div className=&quot;mt-1 text-[11px] text-red-300&quot;&gt;Ingresa un correo válido&lt;/div&gt;&#10;                          )}&#10;                        &lt;/&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                      &lt;div className=&quot;mb-2 text-white/80 text-xs&quot;&gt;Dirección de facturación&lt;/div&gt;&#10;                      &lt;AddressElement options={{ mode: 'billing', fields: { phone: 'never' } }} onChange={(e: StripeAddressElementChangeEvent)=&gt; {&#10;&#10;                  {/* Columna central: resumen y cupón */}&#10;                  &lt;div className=&quot;order-2 md:col-span-2 lg:col-span-2 space-y-3 lg:sticky lg:top-4 self-start&quot;&gt;&#10;                        setBillingAddress(a ? { line1: a.line1, line2: a.line2 ?? undefined, city: a.city, state: a.state, postal_code: a.postal_code, country: a.country } : undefined);&#10;                      }} /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;CheckoutForm intentType={intentType} /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;md:col-span-2 space-y-3&quot;&gt;&#10;                    &lt;div className=&quot;pixel-border rounded-lg p-4&quot;&gt;&#10;                      &lt;div className=&quot;text-sm font-semibold mb-1&quot;&gt;Resumen&lt;/div&gt;&#10;                      &lt;div className=&quot;text-xs text-white/70&quot;&gt;Plan&lt;/div&gt;&#10;                      &lt;div className=&quot;text-white mb-2&quot;&gt;{planIdLabel} ({billingCycleLabel})&lt;/div&gt;&#10;                      &lt;div className=&quot;text-xs text-white/70&quot;&gt;Precio&lt;/div&gt;&#10;                      &lt;div className=&quot;text-white mb-2&quot;&gt;{price ? `${formatMoney(price.unit_amount, price.currency)} / ${price.interval === 'year' ? 'año' : price.interval === 'month' ? 'mes' : price.interval}` : '—'}&lt;/div&gt;&#10;                      {totals?.lineDescription &amp;&amp; (&#10;                        &lt;div className=&quot;text-xs text-white/60 -mt-1 mb-2&quot;&gt;{totals.lineDescription}&lt;/div&gt;&#10;                      )}&#10;                      {totals &amp;&amp; (&#10;                        &lt;div className=&quot;text-sm text-white/80 mt-3 space-y-1&quot;&gt;&#10;                          &lt;div className=&quot;flex justify-between&quot;&gt;&lt;span className=&quot;text-white/70&quot;&gt;Subtotal&lt;/span&gt;&lt;span&gt;{formatMoney(totals.subtotal ?? null, totals.currency || (price?.currency || 'USD'))}&lt;/span&gt;&lt;/div&gt;&#10;                          {!!(totals.discount &amp;&amp; totals.discount &gt; 0) &amp;&amp; (&#10;                            &lt;div className=&quot;flex justify-between&quot;&gt;&lt;span className=&quot;text-white/70&quot;&gt;Ahorro cupón&lt;/span&gt;&lt;span&gt;-{formatMoney(totals.discount ?? null, totals.currency || (price?.currency || 'USD'))}&lt;/span&gt;&lt;/div&gt;&#10;                          )}&#10;                          &lt;div className=&quot;flex justify-between&quot;&gt;&lt;span className=&quot;text-white/70&quot;&gt;Impuestos&lt;/span&gt;&lt;span&gt;{formatMoney(totals.tax ?? null, totals.currency || (price?.currency || 'USD'))}&lt;/span&gt;&lt;/div&gt;&#10;                          &lt;div className=&quot;flex justify-between font-semibold&quot;&gt;&lt;span&gt;Total hoy&lt;/span&gt;&lt;span&gt;{formatMoney(totals.total ?? null, totals.currency || (price?.currency || 'USD'))}&lt;/span&gt;&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                      {!totals &amp;&amp; (&lt;div className=&quot;mt-3 text-xs text-white/50&quot;&gt;Impuestos calculados automáticamente al confirmar.&lt;/div&gt;)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;pixel-border rounded-lg p-3&quot;&gt;&#10;                      &lt;div className=&quot;text-xs text-white/70 mb-1&quot;&gt;Código de promoción&lt;/div&gt;&#10;                      &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                    &lt;div className=&quot;text-[11px] text-white/50&quot;&gt;&#10;                      Al suscribirte autorizas cargos recurrentes según el plan seleccionado. Consulta nuestras &lt;a className=&quot;underline hover:text-white&quot; href=&quot;/terms&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;Condiciones&lt;/a&gt; y &lt;a className=&quot;underline hover:text-white&quot; href=&quot;/privacy&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;Privacidad&lt;/a&gt;.&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Columna derecha: dirección de facturación */}&#10;                  &lt;div className=&quot;order-3 md:col-span-6 lg:col-span-2 space-y-3&quot;&gt;&#10;                        &lt;button disabled={applying || !promotionCode || (!!promoError &amp;&amp; normalizePromo(promotionCode) === normalizePromo(lastInvalidPromo))} onClick={async()=&gt;{ setApplying(true); try { await createSession({ promo: promotionCode }); } finally { setApplying(false); } }} className=&quot;px-3 py-2 rounded bg-yellow-400 text-black text-sm disabled:opacity-60&quot;&gt;{applying ? 'Aplicando…' : 'Aplicar'}&lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                      {promoError &amp;&amp; (&lt;div className=&quot;text-[11px] text-red-300 mt-1&quot;&gt;{promoError}&lt;/div&gt;)}&#10;                      &lt;div className=&quot;text-[11px] text-white/50 mt-1&quot;&gt;Si el código es válido, el total se actualizará al confirmar.&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-[11px] text-white/50&quot;&gt;&#10;                &lt;/div&gt;&#10;              &lt;/Elements&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default function ElementsCheckoutModal({ open, onClose, planId, cycle, email }: Props) {&#10;  // ESC and overlay close behaviors&#10;  useEffect(() =&gt; {&#10;    if (!open) return;&#10;    const prev = document.body.style.overflow;&#10;    document.body.style.overflow = 'hidden';&#10;    const onKey = (e: KeyboardEvent) =&gt; { if (e.key === 'Escape') onClose(); };&#10;    window.addEventListener('keydown', onKey);&#10;    return () =&gt; { document.body.style.overflow = prev; window.removeEventListener('keydown', onKey); };&#10;  }, [open, onClose]);&#10;&#10;  if (!open) return null;&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 z-[100]&quot;&gt;&#10;      &lt;div className=&quot;absolute inset-0 bg-black/70 backdrop-blur-[2px]&quot; onClick={onClose} /&gt;&#10;      &lt;div className=&quot;absolute inset-0 flex items-center justify-center p-4&quot;&gt;&#10;        &lt;Suspense fallback={&lt;div className=&quot;text-white/80&quot;&gt;Cargando…&lt;/div&gt;}&gt;&#10;          &lt;Inner planId={planId} cycle={cycle} initialEmail={email} onClose={onClose} /&gt;&#10;        &lt;/Suspense&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Suspense, useCallback, useEffect, useMemo, useState, type CSSProperties } from 'react';&#10;import { Elements, PaymentElement, useElements, useStripe, LinkAuthenticationElement, AddressElement } from '@stripe/react-stripe-js';&#10;import type { StripeAddressElementChangeEvent, StripeLinkAuthenticationElementChangeEvent } from '@stripe/stripe-js';&#10;import { loadStripe } from '@stripe/stripe-js';&#10;import { useUser } from '@clerk/nextjs';&#10;&#10;type Props = {&#10;  open: boolean;&#10;  onCloseAction: () =&gt; void;&#10;  planId: string;&#10;  cycle: 'monthly' | 'yearly';&#10;  email?: string;&#10;};&#10;&#10;function CheckoutForm({ intentType }: { intentType: 'payment' | 'setup' }) {&#10;  const stripe = useStripe();&#10;  const elements = useElements();&#10;  const [submitting, setSubmitting] = useState(false);&#10;  const [errMsg, setErrMsg] = useState&lt;string | null&gt;(null);&#10;  const [layoutType, setLayoutType] = useState&lt;'tabs' | 'accordion'&gt;(&#10;    () =&gt; (typeof window !== 'undefined' &amp;&amp; window.innerWidth &lt;= 640 ? 'accordion' : 'tabs')&#10;  );&#10;&#10;  useEffect(() =&gt; {&#10;    const onResize = () =&gt; {&#10;      const next = window.innerWidth &lt;= 640 ? 'accordion' : 'tabs';&#10;      setLayoutType(prev =&gt; (prev === next ? prev : next));&#10;    };&#10;    window.addEventListener('resize', onResize);&#10;    return () =&gt; window.removeEventListener('resize', onResize);&#10;  }, []);&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!stripe || !elements) return;&#10;    setSubmitting(true);&#10;    let error;&#10;    setErrMsg(null);&#10;    if (intentType === 'setup') {&#10;      ({ error } = await stripe.confirmSetup({&#10;        elements,&#10;        confirmParams: { return_url: `${window.location.origin}/subscribe/success?checkout=success` },&#10;      }));&#10;    } else {&#10;      ({ error } = await stripe.confirmPayment({&#10;        elements,&#10;        confirmParams: { return_url: `${window.location.origin}/subscribe/success?checkout=success` },&#10;      }));&#10;    }&#10;    if (error) setErrMsg(error.message || 'No se pudo confirmar el pago');&#10;    setSubmitting(false);&#10;  };&#10;&#10;  return (&#10;    &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;&#10;      {errMsg &amp;&amp; (&#10;        &lt;div className=&quot;text-sm text-red-300 bg-red-500/10 border border-red-500/20 rounded p-2&quot;&gt;{errMsg}&lt;/div&gt;&#10;      )}&#10;      &lt;div className=&quot;pixel-border rounded-lg p-3&quot;&gt;&#10;        &lt;PaymentElement&#10;          key={layoutType}&#10;          options={{&#10;            layout: { type: layoutType, defaultCollapsed: layoutType === 'accordion' },&#10;            fields: { billingDetails: { name: 'auto', email: 'never', address: 'auto' } },&#10;          }}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;      &lt;button type=&quot;submit&quot; disabled={submitting || !stripe || !elements} className=&quot;btn w-full px-4 py-3 rounded-md bg-yellow-400 text-black pixel-font text-[12px] tracking-wider hover:bg-yellow-300 disabled:opacity-60&quot;&gt;&#10;        {submitting ? 'Procesando…' : 'Pagar y suscribirse'}&#10;      &lt;/button&gt;&#10;    &lt;/form&gt;&#10;  );&#10;}&#10;&#10;function Inner({ planId, cycle, initialEmail, onCloseAction }: { planId: string; cycle: 'monthly'|'yearly'; initialEmail?: string; onCloseAction: () =&gt; void }) {&#10;  const publishableKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY;&#10;  const stripePromise = useMemo(() =&gt; (publishableKey ? loadStripe(publishableKey) : null), [publishableKey]);&#10;  const { user, isSignedIn } = useUser();&#10;  const [clientSecret, setClientSecret] = useState&lt;string | null&gt;(null);&#10;  const [intentType, setIntentType] = useState&lt;'payment' | 'setup' | null&gt;(null);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [loading, setLoading] = useState(false);&#10;  const [promotionCode, setPromotionCode] = useState('');&#10;  const [applying, setApplying] = useState(false);&#10;  const [promoError, setPromoError] = useState&lt;string | null&gt;(null);&#10;  const [lastInvalidPromo, setLastInvalidPromo] = useState&lt;string | null&gt;(null);&#10;  const [price, setPrice] = useState&lt;{ unit_amount: number | null; currency: string; interval: 'day'|'week'|'month'|'year' } | null&gt;(null);&#10;  const [customerId, setCustomerId] = useState&lt;string | null&gt;(null);&#10;  const [priceId, setPriceId] = useState&lt;string | null&gt;(null);&#10;  const [email, setEmail] = useState&lt;string | undefined&gt;(initialEmail);&#10;  const [emailComplete, setEmailComplete] = useState&lt;boolean&gt;(!!(initialEmail &amp;&amp; /.+@.+\..+/.test(initialEmail)));&#10;  const [totals, setTotals] = useState&lt;{ subtotal?: number; tax?: number; total?: number; discount?: number; currency?: string; lineDescription?: string } | null&gt;(null);&#10;  const [planIdLabel, setPlanIdLabel] = useState('');&#10;  const [billingCycleLabel, setBillingCycleLabel] = useState('');&#10;  const [billingAddress, setBillingAddress] = useState&lt;{ line1?: string; line2?: string; city?: string; state?: string; postal_code?: string; country?: string } | undefined&gt;(undefined);&#10;  const [emailTouched, setEmailTouched] = useState(false);&#10;&#10;  function formatMoney(amountMinor: number | null | undefined, currency: string) {&#10;    if (amountMinor == null) return '—';&#10;    try {&#10;      const amt = amountMinor / 100;&#10;      return new Intl.NumberFormat('es-MX', { style: 'currency', currency: (currency || 'USD').toUpperCase() }).format(amt);&#10;    } catch {&#10;      return `${(amountMinor / 100).toFixed(2)} ${currency?.toUpperCase() || ''}`;&#10;    }&#10;  }&#10;&#10;  const toTitle = (s: string) =&gt; (s ? s.charAt(0).toUpperCase() + s.slice(1).toLowerCase() : s);&#10;  const normalizePromo = (s?: string | null) =&gt; (s ? s.trim().toUpperCase() : '');&#10;&#10;  const isValidEmail = (s?: string) =&gt; !!(s &amp;&amp; /.+@.+\..+/.test(s));&#10;  const createSession = useCallback(async (opts?: { promo?: string }) =&gt; {&#10;    if (!stripePromise) { setError('Stripe publishable key missing'); return; }&#10;    setPlanIdLabel(toTitle(planId));&#10;    setBillingCycleLabel(cycle === 'yearly' ? 'Anual' : 'Mensual');&#10;    if (!isSignedIn &amp;&amp; !isValidEmail(email)) {&#10;      return; // evita llamadas hasta tener email válido&#10;    }&#10;    try {&#10;      const res = await fetch('/api/subscribe/elements', {&#10;        method: 'POST', headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify({&#10;          planId,&#10;          billingCycle: cycle,&#10;          email: !isSignedIn ? (email || undefined) : undefined,&#10;          promotionCode: opts?.promo || undefined,&#10;          customerDetails: billingAddress ? { address: billingAddress, email } : (email ? { email } : undefined),&#10;        })&#10;      });&#10;      const data = await res.json();&#10;      if (!res.ok) { setError(data?.error || 'No se pudo iniciar el pago'); return; }&#10;      setClientSecret(data.client_secret as string);&#10;      setIntentType(data.intent_type === 'setup' ? 'setup' : 'payment');&#10;      setPrice(data.price || null);&#10;      setCustomerId(data.customer_id || null);&#10;      setPriceId(data.price_id || null);&#10;      if (typeof data.promotion_invalid !== 'undefined' &amp;&amp; data.promotion_invalid) {&#10;        setPromoError('Código de promoción no válido.');&#10;        setLastInvalidPromo(normalizePromo(opts?.promo || promotionCode));&#10;        try {&#10;          if (customerId &amp;&amp; priceId) {&#10;            const res2 = await fetch('/api/subscribe/preview', {&#10;              method: 'POST', headers: { 'Content-Type': 'application/json' },&#10;              body: JSON.stringify({ customerId, priceId, customerDetails: billingAddress ? { email, address: billingAddress } : (email ? { email } : undefined) })&#10;            });&#10;            const data2 = await res2.json();&#10;            if (res2.ok) setTotals(data2);&#10;          } else {&#10;            setTotals((prev) =&gt; prev ? { ...prev, discount: 0 } : prev);&#10;          }&#10;        } catch {}&#10;      } else {&#10;        setPromoError(null);&#10;        setLastInvalidPromo(null);&#10;      }&#10;    } catch (e: unknown) {&#10;      setError(e instanceof Error ? e.message : 'Error inesperado');&#10;    }&#10;  }, [stripePromise, planId, cycle, isSignedIn, email, promotionCode, customerId, priceId, billingAddress]);&#10;&#10;  // Debounced single source of truth to create a session&#10;  useEffect(() =&gt; {&#10;    if (!stripePromise) return;&#10;    if (clientSecret) return;&#10;    if (!(isSignedIn || (email &amp;&amp; emailComplete))) return;&#10;    const t = setTimeout(async () =&gt; {&#10;      setLoading(true);&#10;      try { await createSession(); } finally { setLoading(false); }&#10;    }, 350);&#10;    return () =&gt; clearTimeout(t);&#10;  }, [stripePromise, isSignedIn, email, emailComplete, clientSecret, createSession]);&#10;&#10;  useEffect(() =&gt; {&#10;    const t = setTimeout(async () =&gt; {&#10;      if (!customerId || !priceId) return;&#10;      if (promoError &amp;&amp; normalizePromo(promotionCode) === normalizePromo(lastInvalidPromo)) return;&#10;      try {&#10;        const res = await fetch('/api/subscribe/preview', {&#10;          method: 'POST', headers: { 'Content-Type': 'application/json' },&#10;          body: JSON.stringify({ customerId, priceId, promotionCode: promotionCode || undefined, customerDetails: billingAddress ? { email, address: billingAddress } : (email ? { email } : undefined) })&#10;        });&#10;        const data = await res.json();&#10;        if (res.ok) setTotals(data);&#10;      } catch {}&#10;    }, 400);&#10;    return () =&gt; clearTimeout(t);&#10;  }, [customerId, priceId, promotionCode, email, promoError, lastInvalidPromo, billingAddress]);&#10;&#10;  const appearance = {&#10;    theme: 'night' as const,&#10;    variables: {&#10;      colorPrimary: '#FACC15',&#10;      colorBackground: '#0b1220',&#10;      colorText: '#e5e7eb',&#10;      colorTextSecondary: '#9ca3af',&#10;      colorIcon: '#9ca3af',&#10;      colorDanger: '#f87171',&#10;      fontFamily: 'ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu',&#10;      borderRadius: '10px',&#10;      spacingUnit: '6px',&#10;    },&#10;    rules: {&#10;      '.Label': { color: 'rgba(255,255,255,0.7)' },&#10;      '.Error': { color: '#fca5a5' },&#10;      '.Input': { backgroundColor: 'rgba(255,255,255,0.04)', border: '1px solid rgba(255,255,255,0.08)' },&#10;      '.Input:focus': { outline: 'none', boxShadow: '0 0 0 2px rgba(250,204,21,0.45)' },&#10;      '.Input--invalid': { borderColor: '#f87171' },&#10;      '.Tab, .Block': { backgroundColor: 'rgba(255,255,255,0.03)', boxShadow: 'none', border: '1px solid rgba(255,255,255,0.06)' },&#10;      '.Tab:hover': { backgroundColor: 'rgba(255,255,255,0.05)' },&#10;      '.Tab--selected': { borderColor: 'rgba(250,204,21,0.5)' },&#10;    }&#10;  } as const;&#10;&#10;  return (&#10;    &lt;div className=&quot;relative w-full max-w-6xl max-h-[90vh] overflow-y-auto rounded-xl border border-white/10 bg-white/[.02] shadow-2xl backdrop-blur-md pixel-border&quot;&gt;&#10;      {/* Pixel-art close button anchored to the card */}&#10;      &lt;button aria-label=&quot;Cerrar&quot; onClick={onCloseAction} className=&quot;pixel-close-btn -top-5 -right-5 z-20&quot; title=&quot;Cerrar&quot;&gt;&#10;        &lt;span className=&quot;btn-face&quot; /&gt;&#10;      &lt;/button&gt;&#10;      {(() =&gt; { const glowStyle = { ['--glow' as unknown as string]: '#FACC15' } as CSSProperties; return (&lt;div className=&quot;edge-glow&quot; style={glowStyle} /&gt;); })()}&#10;      &lt;div className=&quot;absolute inset-0 rounded-xl pointer-events-none ring-1 ring-white/5&quot; /&gt;&#10;      &lt;div className=&quot;relative p-4 sm:p-6&quot;&gt;&#10;        {loading &amp;&amp; (&lt;div className=&quot;absolute top-3 right-3 text-[11px] text-white/60&quot;&gt;Preparando…&lt;/div&gt;)}&#10;        &lt;div className=&quot;mb-3 flex items-center justify-between text-white/80&quot;&gt;&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;svg width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden&gt;&#10;              &lt;path d=&quot;M6 10V8a6 6 0 1 1 12 0v2&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;1.5&quot; strokeLinecap=&quot;round&quot; /&gt;&#10;              &lt;rect x=&quot;4&quot; y=&quot;10&quot; width=&quot;16&quot; height=&quot;10&quot; rx=&quot;2&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;1.5&quot; /&gt;&#10;              &lt;circle cx=&quot;12&quot; cy=&quot;15&quot; r=&quot;1.5&quot; fill=&quot;currentColor&quot; /&gt;&#10;            &lt;/svg&gt;&#10;            &lt;span className=&quot;pixel-font text-[10px] tracking-wider&quot;&gt;Pago seguro con Stripe&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;span className=&quot;pixel-font text-[10px] text-white/50&quot;&gt;PixelGrimoire&lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {!publishableKey &amp;&amp; (&#10;          &lt;div className=&quot;text-red-300&quot;&gt;Falta configurar NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY&lt;/div&gt;&#10;        )}&#10;&#10;        {error &amp;&amp; (&#10;          &lt;div className=&quot;text-red-300 space-y-3&quot;&gt;&#10;            &lt;div&gt;{error}&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {!error &amp;&amp; (&#10;          &lt;div className=&quot;relative min-h-[560px]&quot;&gt;&#10;            {!clientSecret || !stripePromise || !intentType ? (&#10;              &lt;div className=&quot;absolute inset-0 grid place-items-center text-white/60&quot;&gt;&#10;                &lt;div className=&quot;animate-pulse&quot;&gt;Cargando…&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;Elements options={{ clientSecret, appearance, loader: 'always', locale: 'es' }} stripe={stripePromise}&gt;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-6 lg:grid-cols-9 gap-6&quot;&gt;&#10;                  {/* Columna izquierda: formulario */}&#10;                  &lt;div className=&quot;order-1 md:col-span-4 lg:col-span-5 space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;pixel-border rounded-lg p-3 md:p-4&quot;&gt;&#10;                      &lt;div className=&quot;mb-2 text-white/80 text-xs&quot;&gt;Correo electrónico&lt;/div&gt;&#10;                      {isSignedIn ? (&#10;                        &lt;div className=&quot;px-3 py-2 rounded bg-white/5 border border-white/10 text-white/80 text-sm select-none cursor-not-allowed&quot;&gt;&#10;                          {user?.primaryEmailAddress?.emailAddress || user?.emailAddresses?.[0]?.emailAddress || '—'}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;&gt;&#10;                          &lt;LinkAuthenticationElement&#10;                            options={ email &amp;&amp; emailComplete ? { defaultValues: { email } } : undefined }&#10;                            onChange={(e: StripeLinkAuthenticationElementChangeEvent)=&gt; { setEmailTouched(true); setEmail(e.value?.email || undefined); setEmailComplete(e.complete); }}&#10;                          /&gt;&#10;                          {!isSignedIn &amp;&amp; emailTouched &amp;&amp; !emailComplete &amp;&amp; (&#10;                            &lt;div className=&quot;mt-1 text-[11px] text-red-300&quot;&gt;Ingresa un correo válido&lt;/div&gt;&#10;                          )}&#10;                        &lt;/&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                    &lt;CheckoutForm intentType={intentType} /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Columna central: resumen y cupón */}&#10;                  &lt;div className=&quot;order-2 md:col-span-2 lg:col-span-2 space-y-3 lg:sticky lg:top-4 self-start&quot;&gt;&#10;                    &lt;div className=&quot;pixel-border rounded-lg p-4 md:p-5&quot;&gt;&#10;                      &lt;div className=&quot;text-sm font-semibold mb-1&quot;&gt;Resumen&lt;/div&gt;&#10;                      &lt;div className=&quot;text-xs text-white/70&quot;&gt;Plan&lt;/div&gt;&#10;                      &lt;div className=&quot;text-white mb-2&quot;&gt;{planIdLabel} ({billingCycleLabel})&lt;/div&gt;&#10;                      &lt;div className=&quot;text-xs text-white/70&quot;&gt;Precio&lt;/div&gt;&#10;                      &lt;div className=&quot;text-white mb-2&quot;&gt;{price ? `${formatMoney(price.unit_amount, price.currency)} / ${price.interval === 'year' ? 'año' : price.interval === 'month' ? 'mes' : price.interval}` : '—'}&lt;/div&gt;&#10;                      {totals?.lineDescription &amp;&amp; (&#10;                        &lt;div className=&quot;text-xs text-white/60 -mt-1 mb-2&quot;&gt;{totals.lineDescription}&lt;/div&gt;&#10;                      )}&#10;                      {totals &amp;&amp; (&#10;                        &lt;div className=&quot;text-sm text-white/80 mt-3 space-y-1&quot;&gt;&#10;                          &lt;div className=&quot;flex justify-between&quot;&gt;&lt;span className=&quot;text-white/70&quot;&gt;Subtotal&lt;/span&gt;&lt;span&gt;{formatMoney(totals.subtotal ?? null, totals.currency || (price?.currency || 'USD'))}&lt;/span&gt;&lt;/div&gt;&#10;                          {!!(totals.discount &amp;&amp; totals.discount &gt; 0) &amp;&amp; (&#10;                            &lt;div className=&quot;flex justify-between&quot;&gt;&lt;span className=&quot;text-white/70&quot;&gt;Ahorro cupón&lt;/span&gt;&lt;span&gt;-{formatMoney(totals.discount ?? null, totals.currency || (price?.currency || 'USD'))}&lt;/span&gt;&lt;/div&gt;&#10;                          )}&#10;                          &lt;div className=&quot;flex justify-between&quot;&gt;&lt;span className=&quot;text-white/70&quot;&gt;Impuestos&lt;/span&gt;&lt;span&gt;{formatMoney(totals.tax ?? null, totals.currency || (price?.currency || 'USD'))}&lt;/span&gt;&lt;/div&gt;&#10;                          &lt;div className=&quot;flex justify-between font-semibold&quot;&gt;&lt;span&gt;Total hoy&lt;/span&gt;&lt;span&gt;{formatMoney(totals.total ?? null, totals.currency || (price?.currency || 'USD'))}&lt;/span&gt;&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                      {!totals &amp;&amp; (&lt;div className=&quot;mt-3 text-xs text-white/50&quot;&gt;Impuestos calculados automáticamente al confirmar.&lt;/div&gt;)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;pixel-border rounded-lg p-3 md:p-4&quot;&gt;&#10;                      &lt;div className=&quot;text-xs text-white/70 mb-1&quot;&gt;Código de promoción&lt;/div&gt;&#10;                      &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                        &lt;input value={promotionCode} onChange={(e)=&gt;{ const v = e.target.value; setPromotionCode(v); if (promoError) setPromoError(null); }} placeholder=&quot;PROMO&quot; className=&quot;flex-1 bg-white/5 border border-white/10 rounded px-2 py-2 text-sm&quot; /&gt;&#10;                        &lt;button disabled={applying || !promotionCode || (!!promoError &amp;&amp; normalizePromo(promotionCode) === normalizePromo(lastInvalidPromo))} onClick={async()=&gt;{ setApplying(true); try { await createSession({ promo: promotionCode }); } finally { setApplying(false); } }} className=&quot;px-3 py-2 rounded bg-yellow-400 text-black text-sm disabled:opacity-60&quot;&gt;{applying ? 'Aplicando…' : 'Aplicar'}&lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                      {promoError &amp;&amp; (&lt;div className=&quot;text-[11px] text-red-300 mt-1&quot;&gt;{promoError}&lt;/div&gt;)}&#10;                      &lt;div className=&quot;text-[11px] text-white/50 mt-1&quot;&gt;Si el código es válido, el total se actualizará al confirmar.&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-[11px] text-white/50&quot;&gt;&#10;                      Al suscribirte autorizas cargos recurrentes según el plan seleccionado. Consulta nuestras &lt;a className=&quot;underline hover:text-white&quot; href=&quot;/terms&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;Condiciones&lt;/a&gt; y &lt;a className=&quot;underline hover:text-white&quot; href=&quot;/privacy&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;Privacidad&lt;/a&gt;.&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Columna derecha: dirección de facturación */}&#10;                  &lt;div className=&quot;order-3 md:col-span-6 lg:col-span-2 space-y-3&quot;&gt;&#10;                    &lt;div className=&quot;pixel-border rounded-lg p-3 md:p-4&quot;&gt;&#10;                      &lt;div className=&quot;mb-2 text-white/80 text-xs&quot;&gt;Dirección de facturación&lt;/div&gt;&#10;                      &lt;AddressElement options={{ mode: 'billing', fields: { phone: 'never' } }} onChange={(e: StripeAddressElementChangeEvent)=&gt; {&#10;                        const a = e?.value?.address;&#10;                        setBillingAddress(a ? { line1: a.line1, line2: a.line2 ?? undefined, city: a.city, state: a.state, postal_code: a.postal_code, country: a.country } : undefined);&#10;                      }} /&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/Elements&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default function ElementsCheckoutModal({ open, onCloseAction, planId, cycle, email }: Props) {&#10;  // ESC and overlay close behaviors&#10;  useEffect(() =&gt; {&#10;    if (!open) return;&#10;    const prev = document.body.style.overflow;&#10;    document.body.style.overflow = 'hidden';&#10;    const onKey = (e: KeyboardEvent) =&gt; { if (e.key === 'Escape') onCloseAction(); };&#10;    window.addEventListener('keydown', onKey);&#10;    return () =&gt; { document.body.style.overflow = prev; window.removeEventListener('keydown', onKey); };&#10;  }, [open, onCloseAction]);&#10;&#10;  if (!open) return null;&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 z-[100]&quot;&gt;&#10;      &lt;div className=&quot;absolute inset-0 bg-black/70 backdrop-blur-[2px]&quot; onClick={onCloseAction} /&gt;&#10;      &lt;div className=&quot;absolute inset-0 flex items-center justify-center p-4&quot;&gt;&#10;        &lt;Suspense fallback={&lt;div className=&quot;text-white/80&quot;&gt;Cargando…&lt;/div&gt;}&gt;&#10;          &lt;Inner planId={planId} cycle={cycle} initialEmail={email} onCloseAction={onCloseAction} /&gt;&#10;        &lt;/Suspense&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Subscriptions.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Subscriptions.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import MagicPlanCard from '@/components/MagicPlanCard';&#10;import ElementsCheckoutModal from '@/components/ElementsCheckoutModal';&#10;import { PLANS, type Plan } from '@/lib/constants';&#10;&#10;export default function Subscriptions({ magicEnabled = true }: { magicEnabled?: boolean }) {&#10;  const [yearly, setYearly] = useState(true);&#10;  const [loading] = useState(false);&#10;  const [modalOpen, setModalOpen] = useState(false);&#10;  const [selectedPlan, setSelectedPlan] = useState&lt;Plan | null&gt;(null);&#10;&#10;  const subscribe = async (plan: Plan) =&gt; {&#10;    // Open modal with Stripe Embedded Checkout&#10;    setSelectedPlan(plan);&#10;    setModalOpen(true);&#10;  };&#10;&#10;  return (&#10;    &lt;section id=&quot;pricing&quot; className=&quot;relative z-20 py-20&quot; data-magic={magicEnabled ? 'on' : 'off'}&gt;&#10;      &lt;div className=&quot;mx-auto max-w-7xl px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between gap-4 flex-wrap&quot;&gt;&#10;          &lt;h2 className=&quot;text-white text-2xl sm:text-3xl font-bold smooth-font&quot;&gt;Subscripciones&lt;/h2&gt;&#10;          &lt;div className=&quot;flex items-center gap-2 text-white/80 smooth-font&quot;&gt;&#10;            &lt;span className={!yearly ? 'text-white' : 'text-white/60'}&gt;Mensual&lt;/span&gt;&#10;            &lt;button onClick={()=&gt;setYearly(v=&gt;!v)} className=&quot;px-2 py-1 rounded border border-white/20 hover:bg-white/5&quot; disabled={loading}&gt;{yearly? 'Anual ✓' : 'Anual'}&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;grid md:grid-cols-3 gap-6 mt-8&quot;&gt;&#10;          {PLANS.map(p=&gt; (&#10;            &lt;MagicPlanCard key={p.id} plan={p} yearly={yearly} onSubscribeAction={subscribe} /&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;        {/* Modal mount: custom Elements flow (preferred) */}&#10;        &lt;ElementsCheckoutModal&#10;          open={modalOpen}&#10;          onClose={()=&gt; setModalOpen(false)}&#10;          planId={selectedPlan?.id || 'apprentice'}&#10;          cycle={yearly ? 'yearly' : 'monthly'}&#10;          email={typeof window !== 'undefined' ? (localStorage.getItem('pg_email') || undefined) : undefined}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/section&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import MagicPlanCard from '@/components/MagicPlanCard';&#10;import ElementsCheckoutModal from '@/components/ElementsCheckoutModal';&#10;import { PLANS, type Plan } from '@/lib/constants';&#10;&#10;export default function Subscriptions({ magicEnabled = true }: { magicEnabled?: boolean }) {&#10;  const [yearly, setYearly] = useState(true);&#10;  const [loading] = useState(false);&#10;  const [modalOpen, setModalOpen] = useState(false);&#10;  const [selectedPlan, setSelectedPlan] = useState&lt;Plan | null&gt;(null);&#10;&#10;  const subscribe = async (plan: Plan) =&gt; {&#10;    // Open modal with Stripe Embedded Checkout&#10;    setSelectedPlan(plan);&#10;    setModalOpen(true);&#10;  };&#10;&#10;  return (&#10;    &lt;section id=&quot;pricing&quot; className=&quot;relative z-20 py-20&quot; data-magic={magicEnabled ? 'on' : 'off'}&gt;&#10;      &lt;div className=&quot;mx-auto max-w-7xl px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between gap-4 flex-wrap&quot;&gt;&#10;          &lt;h2 className=&quot;text-white text-2xl sm:text-3xl font-bold smooth-font&quot;&gt;Subscripciones&lt;/h2&gt;&#10;          &lt;div className=&quot;flex items-center gap-2 text-white/80 smooth-font&quot;&gt;&#10;            &lt;span className={!yearly ? 'text-white' : 'text-white/60'}&gt;Mensual&lt;/span&gt;&#10;            &lt;button onClick={()=&gt;setYearly(v=&gt;!v)} className=&quot;px-2 py-1 rounded border border-white/20 hover:bg-white/5&quot; disabled={loading}&gt;{yearly? 'Anual ✓' : 'Anual'}&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;grid md:grid-cols-3 gap-6 mt-8&quot;&gt;&#10;          {PLANS.map(p=&gt; (&#10;            &lt;MagicPlanCard key={p.id} plan={p} yearly={yearly} onSubscribeAction={subscribe} /&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;        {/* Modal mount: custom Elements flow (preferred) */}&#10;        &lt;ElementsCheckoutModal&#10;          open={modalOpen}&#10;          onCloseAction={()=&gt; setModalOpen(false)}&#10;          planId={selectedPlan?.id || 'apprentice'}&#10;          cycle={yearly ? 'yearly' : 'monthly'}&#10;          email={typeof window !== 'undefined' ? (localStorage.getItem('pg_email') || undefined) : undefined}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/section&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>