generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // En Vercel (Neon), usa la URL sin pool ya existente:
  // POSTGRES_URL_NON_POOLING o DATABASE_URL_UNPOOLED
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  stripeCustomerId String?   @unique
  clerkUserId      String?   @unique

  customers Customer[]
  claimTokens ClaimToken[]
}

model Customer {
  id        String   @id // Stripe Customer ID (e.g., cus_...)
  email     String?  // not unique to avoid conflicts
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())

  subscriptions Subscription[]
  entitlements  Entitlement[]
  projectSelections ProjectSelection[]
}

model Subscription {
  id                 String    @id @default(cuid())
  stripeId           String    @unique // Stripe Subscription ID (sub_...)
  customerId         String
  status             String
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  customer   Customer  @relation(fields: [customerId], references: [id])
  items      SubscriptionItem[]
}

model SubscriptionItem {
  id               String   @id @default(cuid())
  stripeItemId     String   @unique // si usas items (siempre en subs de stripe)
  subscriptionId   String
  stripePriceId    String
  stripeProductId  String?
  quantity         Int      @default(1)

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
}

model Entitlement {
  id               String   @id @default(cuid())
  customerId       String
  code             String
  status           String
  currentPeriodEnd DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])

  @@unique([customerId, code])
}

model ClaimToken {
  id               String   @id @default(cuid())
  tokenHash        String   @unique
  email            String?
  stripeCustomerId String?
  userId           String?
  user             User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  status           String   @default("pending") // pending, bound, consumed, expired
  createdAt        DateTime @default(now())
  expiresAt        DateTime?
  usedAt           DateTime?
}

model ClaimOtp {
  id         String   @id @default(cuid())
  tokenHash  String
  otpHash    String
  attempts   Int      @default(0)
  maxAttempts Int     @default(5)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  consumedAt DateTime?

  @@index([tokenHash])
}

model ProjectSelection {
  id                String   @id @default(cuid())
  customerId        String
  entitlementCode   String   // Código de entitlement al que aplica la selección (p.ej. "pos.basic")
  currentProject    String?  // slug del proyecto actual (p.ej. "qubito")
  pendingProject    String?  // slug del siguiente proyecto elegido
  pendingEffectiveAt DateTime? // cuándo se aplica el cambio (fin de período)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])

  @@unique([customerId, entitlementCode])
}

model PlanConfig {
  id              String   @id @default(cuid())
  planId          String   @unique
  name            String
  stripeProductId String?
  priceMonthlyId  String?
  priceYearlyId   String?
  currency        String?  @default("usd")
  trialDays       Int      @default(0)
  graceDays       Int      @default(3)
  subtitle        String?
  color           String?
  popular         Boolean  @default(false)
  comingSoon      Boolean  @default(false)
  featuresJson    String?
  entitlementsJson String?
  entitlementProjectsJson String?
  sortOrder       Int      @default(100)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model FeaturedProject {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  subtitle  String?
  summary   String?
  thumbnailUrl String?
  // Render kind: html | iframe | image | video | pdf | react
  kind      String   @default("html")
  // For iframe/image/video/pdf/html (Blob or external):
  contentUrl String?
  // For kind=react: a whitelisted component key or slug handled in the app
  componentKey String?
  html      String
  active    Boolean  @default(true)
  sortOrder Int      @default(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
